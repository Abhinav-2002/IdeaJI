"use client";

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useAuth } from '@/contexts/AuthContext';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { IdeaCard } from '@/components/ideas/idea-card';

// Define types for dashboard data
type UserStats = {
  points: number;
  ideasCount: number;
  feedbacksCount: number;
  rank: string;
  nextRank: string;
  pointsToNextRank: number;
};

type Idea = {
  id: string;
  title: string;
  description: string;
  createdAt: Date;
  author: string;
  rating: number;
  reviewCount: number;
  tags: { name: string }[];
  aiSummary?: string;
};

type Activity = {
  type: 'review' | 'idea_submitted';
  idea: string;
  date: string;
  points: number;
};

type Reward = {
  id: string;
  name: string;
  points: number;
  description: string;
};

export default function DashboardPage() {
  const router = useRouter();
  const { session, status } = useAuth();
  
  // State for dashboard data
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userStats, setUserStats] = useState<UserStats>({
    points: 0,
    ideasCount: 0,
    feedbacksCount: 0,
    rank: 'Beginner',
    nextRank: 'Innovator',
    pointsToNextRank: 100,
  });
  const [userIdeas, setUserIdeas] = useState<Idea[]>([]);
  const [recentActivity, setRecentActivity] = useState<Activity[]>([]);
  const [availableRewards, setAvailableRewards] = useState<Reward[]>([]);

  // Calculate user rank based on points
  const calculateRank = (points: number) => {
    if (points < 100) return { rank: 'Beginner', nextRank: 'Innovator', pointsToNextRank: 100 - points };
    if (points < 300) return { rank: 'Innovator', nextRank: 'Visionary', pointsToNextRank: 300 - points };
    if (points < 600) return { rank: 'Visionary', nextRank: 'Pioneer', pointsToNextRank: 600 - points };
    if (points < 1000) return { rank: 'Pioneer', nextRank: 'Luminary', pointsToNextRank: 1000 - points };
    return { rank: 'Luminary', nextRank: 'Luminary', pointsToNextRank: 0 };
  };

  // Format date for activity feed
  const formatActivityDate = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor(diff / (1000 * 60));

    if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`;
    if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
  };

  // Fetch dashboard data
  useEffect(() => {
    // Check if user is authenticated
    if (status === "unauthenticated") {
      router.push("/auth/login?callbackUrl=/dashboard");
      return;
    }

    if (status === "authenticated") {
      const fetchDashboardData = async () => {
        try {
          setIsLoading(true);
          setError(null);

          const response = await fetch('/api/dashboard');
          
          if (!response.ok) {
            throw new Error('Failed to fetch dashboard data');
          }

          const data = await response.json();
          
          // Process user stats
          const rankInfo = calculateRank(data.user.points);
          setUserStats({
            points: data.user.points,
            ideasCount: data.stats.totalIdeas,
            feedbacksCount: data.stats.totalFeedback,
            ...rankInfo
          });

          // Process user ideas
          const processedIdeas = data.ideas.map((idea: any) => ({
            id: idea.id,
            title: idea.title,
            description: idea.description,
            createdAt: new Date(idea.createdAt),
            author: 'You',
            rating: idea._count.feedbacks > 0 ? 
              idea.feedbacks.reduce((sum: number, fb: any) => sum + fb.rating, 0) / idea._count.feedbacks : 0,
            reviewCount: idea._count.feedbacks,
            tags: idea.tags,
            aiSummary: idea.aiSummary?.content
          }));
          setUserIdeas(processedIdeas);

          // Process recent activity
          const processedActivity = data.recentActivity.map((activity: any) => ({
            type: activity.type,
            idea: activity.title,
            date: formatActivityDate(new Date(activity.date)),
            points: activity.points
          }));
          setRecentActivity(processedActivity);

          // Process available rewards
          setAvailableRewards(data.rewards);

        } catch (error: any) {
          console.error('Error fetching dashboard data:', error);
          setError(error.message || 'An error occurred while fetching dashboard data');
        } finally {
          setIsLoading(false);
        }
      };

      fetchDashboardData();
    }
  }, [status, router]);

  // Show loading state
  if (status === "loading" || isLoading) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 py-12">
          <div className="container">
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  // Redirect to login if not authenticated
  if (status === "unauthenticated") {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 py-12">
          <div className="container">
            <div className="text-center">
              <h2 className="text-2xl font-bold mb-4">Authentication Required</h2>
              <p className="mb-4">You need to be logged in to view your dashboard.</p>
              <p>Redirecting to login page...</p>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  // Show error state
  if (error) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 py-12">
          <div className="container">
            <div className="text-center">
              <h2 className="text-2xl font-bold mb-4">Error Loading Dashboard</h2>
              <p className="mb-4 text-red-500">{error}</p>
              <Button onClick={() => window.location.reload()}>Try Again</Button>
            </div>
          </div>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-1 py-12">
        <div className="container">
          {/* User Stats Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Forge Points</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{userStats.points}</div>
                <p className="text-xs text-muted-foreground mt-1">
                  {userStats.pointsToNextRank > 0 ? 
                    `${userStats.pointsToNextRank} points to reach ${userStats.nextRank}` : 
                    'Maximum rank achieved'}
                </p>
                {userStats.pointsToNextRank > 0 && (
                  <Progress 
                    value={(userStats.points / (userStats.points + userStats.pointsToNextRank)) * 100} 
                    className="h-1 mt-2" 
                  />
                )}
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Ideas Submitted</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{userStats.ideasCount}</div>
                <p className="text-xs text-muted-foreground mt-1">
                  {userStats.ideasCount === 0 ? 
                    'Submit your first idea today!' : 
                    `${userStats.ideasCount} idea${userStats.ideasCount !== 1 ? 's' : ''} shared with the community`}
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Reviews Given</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{userStats.feedbacksCount}</div>
                <p className="text-xs text-muted-foreground mt-1">
                  {userStats.feedbacksCount === 0 ? 
                    'Help others by reviewing ideas' : 
                    `${userStats.feedbacksCount} review${userStats.feedbacksCount !== 1 ? 's' : ''} provided to the community`}
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Current Rank</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{userStats.rank}</div>
                <p className="text-xs text-muted-foreground mt-1">
                  {userStats.rank !== userStats.nextRank ? 
                    `Next rank: ${userStats.nextRank}` : 
                    'Highest rank achieved'}
                </p>
              </CardContent>
            </Card>
          </div>
          
          {/* Main Content */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* User Ideas */}
            <div className="lg:col-span-2">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold">Your Ideas</h2>
                <Button asChild>
                  <Link href="/ideas/submit">Submit New Idea</Link>
                </Button>
              </div>
              
              {userIdeas.length === 0 ? (
                <Card>
                  <CardContent className="p-6">
                    <div className="text-center py-8">
                      <h3 className="text-lg font-semibold mb-2">No Ideas Yet</h3>
                      <p className="text-muted-foreground mb-4">
                        You haven't submitted any ideas yet. Share your first idea with the community!
                      </p>
                      <Button asChild>
                        <Link href="/ideas/submit">Submit Your First Idea</Link>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ) : (
                <div className="space-y-6">
                  {userIdeas.map((idea) => (
                    <IdeaCard key={idea.id} idea={idea} />
                  ))}
                </div>
              )}
            </div>
            
            {/* Sidebar */}
            <div className="space-y-8">
              {/* Recent Activity */}
              <Card>
                <CardHeader>
                  <CardTitle>Recent Activity</CardTitle>
                </CardHeader>
                <CardContent>
                  {recentActivity.length === 0 ? (
                    <p className="text-center text-muted-foreground py-4">No recent activity</p>
                  ) : (
                    <ul className="space-y-4">
                      {recentActivity.map((activity, index) => (
                        <li key={index} className="flex items-start">
                          <div className={`w-2 h-2 rounded-full mt-2 mr-2 ${activity.type === 'review' ? 'bg-blue-500' : 'bg-green-500'}`}></div>
                          <div className="flex-1">
                            <p className="text-sm">
                              {activity.type === 'review' ? 'You reviewed ' : 'You submitted '}
                              <span className="font-medium">{activity.idea}</span>
                            </p>
                            <div className="flex justify-between items-center mt-1">
                              <span className="text-xs text-muted-foreground">{activity.date}</span>
                              <Badge variant="outline" className="text-xs">+{activity.points} points</Badge>
                            </div>
                          </div>
                        </li>
                      ))}
                    </ul>
                  )}
                </CardContent>
              </Card>
              
              {/* Available Rewards */}
              <Card>
                <CardHeader>
                  <CardTitle>Available Rewards</CardTitle>
                </CardHeader>
                <CardContent>
                  {availableRewards.length === 0 ? (
                    <p className="text-center text-muted-foreground py-4">No rewards available</p>
                  ) : (
                    <ul className="space-y-4">
                      {availableRewards.map((reward) => (
                        <li key={reward.id} className="border rounded-lg p-3">
                          <div className="flex justify-between items-start">
                            <h4 className="font-medium">{reward.name}</h4>
                            <Badge variant="secondary">{reward.points} points</Badge>
                          </div>
                          <p className="text-sm text-muted-foreground mt-1">{reward.description}</p>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="w-full mt-2"
                            disabled={userStats.points < reward.points}
                          >
                            {userStats.points >= reward.points ? 'Redeem Reward' : 'Not Enough Points'}
                          </Button>
                        </li>
                      ))}
                    </ul>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}
