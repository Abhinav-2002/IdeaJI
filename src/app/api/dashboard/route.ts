import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";

// Mock data for when database is not available or for development
const mockData = {
  user: {
    id: "mock-user-id",
    name: "Demo User",
    email: "demo@example.com",
    image: null,
    bio: "This is a demo user account.",
    points: 580,
  },
  stats: {
    totalIdeas: 3,
    totalFeedback: 42,
    points: 580,
    memberSince: new Date("2025-01-01"),
  },
  ideas: [
    {
      id: "mock-idea-1",
      title: "AI-Powered Recipe Recommender",
      description: "An app that uses AI to recommend recipes based on ingredients you already have at home, dietary restrictions, and personal preferences.",
      createdAt: new Date("2025-05-20"),
      tags: [{ name: "Innovative" }, { name: "Practical" }, { name: "Market-Ready" }],
      _count: { feedbacks: 28 },
      aiSummary: { content: "Strong concept with clear value proposition. Consider adding meal planning features and grocery list integration to enhance user experience." },
    },
    {
      id: "mock-idea-2",
      title: "Remote Team Building Platform",
      description: "A platform designed to foster team bonding and collaboration for remote teams through interactive games, challenges, and virtual events.",
      createdAt: new Date("2025-05-18"),
      tags: [{ name: "Timely" }, { name: "Scalable" }, { name: "B2B" }],
      _count: { feedbacks: 15 },
      aiSummary: { content: "Addresses a growing need in the remote work era. Focus on creating unique activities that cannot be easily replicated on existing platforms." },
    },
    {
      id: "mock-idea-3",
      title: "Sustainable Fashion Marketplace",
      description: "An online marketplace connecting eco-conscious consumers with sustainable fashion brands and second-hand clothing sellers.",
      createdAt: new Date("2025-05-15"),
      tags: [{ name: "Eco-Friendly" }, { name: "Marketplace" }, { name: "Trending" }],
      _count: { feedbacks: 32 },
      aiSummary: { content: "Excellent timing with growing consumer interest in sustainability. Consider adding authentication features for verifying sustainability claims." },
    },
  ],
  recentActivity: [
    { type: "feedback", id: "mock-activity-1", title: "Feedback on \"Mental Health Check-in App\"", date: new Date(Date.now() - 2 * 60 * 60 * 1000), content: "Great idea! I think this could really help people." },
    { type: "feedback", id: "mock-activity-2", title: "Feedback on \"Neighborhood Skill Exchange\"", date: new Date(Date.now() - 24 * 60 * 60 * 1000), content: "I would definitely use this in my community." },
    { type: "idea", id: "mock-activity-3", title: "AI-Powered Recipe Recommender", date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), content: "An app that uses AI to recommend recipes based on ingredients you already have at home." },
    { type: "feedback", id: "mock-activity-4", title: "Feedback on \"Personal Finance Education App\"", date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), content: "This would be so useful for young adults." },
    { type: "feedback", id: "mock-activity-5", title: "Feedback on \"Sustainable Fashion Marketplace\"", date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), content: "I'm passionate about sustainable fashion and would love to see this developed." },
  ],
  rewards: [
    { id: "mock-reward-1", name: "AI-Generated Pitch Deck", pointsCost: 300, description: "Get a professionally designed pitch deck for your idea, generated by AI." },
    { id: "mock-reward-2", name: "30-min Mentorship Call", pointsCost: 500, description: "Schedule a one-on-one call with an experienced founder in your industry." },
    { id: "mock-reward-3", name: "Domain Name Discount", pointsCost: 200, description: "50% off your first year of domain registration with our partner." },
    { id: "mock-reward-4", name: "No-Code Tool Subscription", pointsCost: 400, description: "3-month free subscription to a premium no-code development platform." },
  ],
};

// GET handler for fetching user dashboard data
export async function GET(req: Request) {
  try {
    const session = await getServerSession(authOptions);

    // Check if user is authenticated
    if (!session || !session.user) {
      console.log("User not authenticated, returning mock data");
      return NextResponse.json(mockData);
    }

    const userId = session.user.id;
    console.log("Fetching dashboard data for user:", userId);

    try {
      // Get user profile data
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: {
          id: true,
          name: true,
          email: true,
          image: true,
          points: true,
          bio: true,
          createdAt: true,
          _count: {
            select: {
              ideas: true,
              feedbacks: true,
            },
          },
        },
      });

      if (!user) {
        console.log("User not found in database, returning mock data");
        return NextResponse.json(mockData);
      }

      // Get user's ideas
      const ideas = await prisma.idea.findMany({
        where: { userId },
        include: {
          tags: true,
          _count: {
            select: {
              feedbacks: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
        take: 5, // Limit to 5 most recent ideas
      });

      // Get user's recent feedback
      const feedbacks = await prisma.feedback.findMany({
        where: { userId },
        include: {
          idea: {
            select: {
              id: true,
              title: true,
            },
          },
        },
        orderBy: {
          createdAt: "desc",
        },
        take: 5, // Limit to 5 most recent feedbacks
      });

      // Get available rewards
      const rewards = await prisma.reward.findMany({
        where: {
          isAvailable: true,
          pointsCost: {
            lte: user.points, // Only show rewards the user can afford
          },
        },
        orderBy: {
          pointsCost: "asc",
        },
      });

      // Get user's activity stats
      const stats = {
        totalIdeas: user._count.ideas,
        totalFeedback: user._count.feedbacks,
        points: user.points,
        memberSince: user.createdAt,
      };

      // Get recent activity (combined ideas and feedback)
      const recentActivity = [
        ...ideas.map(idea => ({
          type: "idea",
          id: idea.id,
          title: idea.title,
          date: idea.createdAt,
          content: idea.description.substring(0, 100) + (idea.description.length > 100 ? "..." : ""),
        })),
        ...feedbacks.map(feedback => ({
          type: "feedback",
          id: feedback.id,
          title: `Feedback on "${feedback.idea.title}"`,
          date: feedback.createdAt,
          content: feedback.content.substring(0, 100) + (feedback.content.length > 100 ? "..." : ""),
        })),
      ].sort((a, b) => b.date.getTime() - a.date.getTime()).slice(0, 10);

      return NextResponse.json({
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          image: user.image,
          bio: user.bio,
          points: user.points,
        },
        stats,
        ideas,
        feedbacks,
        rewards,
        recentActivity,
      });
    } catch (dbError) {
      console.error("Database error, falling back to mock data:", dbError);
      return NextResponse.json(mockData);
    }
  } catch (error) {
    console.error("Error fetching dashboard data:", error);
    // Return mock data instead of an error
    return NextResponse.json(mockData);
  }
}
