import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/db';
import { z } from 'zod';

// Validation schema for idea feedback
const feedbackSchema = z.object({
  ideaId: z.string(),
  rating: z.number().min(1).max(5).optional(),
  comment: z.string().optional(),
  tags: z.array(z.string()).optional(),
  action: z.enum(['like', 'pass', 'detailed']),
});

export async function POST(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Get user ID from session
    const userId = session.user.id;
    
    // Parse and validate request body
    const body = await request.json();
    const validatedData = feedbackSchema.parse(body);
    
    // Check if idea exists
    const idea = await prisma.idea.findUnique({
      where: { id: validatedData.ideaId },
    });
    
    if (!idea) {
      return NextResponse.json(
        { error: 'Idea not found' },
        { status: 404 }
      );
    }
    
    // Check if user has already provided feedback for this idea
    const existingFeedback = await prisma.feedback.findFirst({
      where: {
        ideaId: validatedData.ideaId,
        userId: userId,
      },
    });
    
    // Calculate points based on feedback type
    let pointsToAward = 0;
    
    if (validatedData.action === 'like') {
      pointsToAward = 10;
    } else if (validatedData.action === 'pass') {
      pointsToAward = 5;
    } else if (validatedData.action === 'detailed') {
      pointsToAward = 20;
    }
    
    // Create or update feedback
    let feedback;
    
    if (existingFeedback) {
      // Update existing feedback
      feedback = await prisma.feedback.update({
        where: { id: existingFeedback.id },
        data: {
          rating: validatedData.rating || null,
          content: validatedData.comment || null,
          comment: validatedData.comment || null,
          tags: validatedData.tags ? validatedData.tags.join(',') : null,
          action: validatedData.action,
        },
      });
    } else {
      // Create new feedback
      feedback = await prisma.feedback.create({
        data: {
          ideaId: validatedData.ideaId,
          userId: userId,
          rating: validatedData.rating || null,
          content: validatedData.comment || null,
          comment: validatedData.comment || null,
          tags: validatedData.tags ? validatedData.tags.join(',') : null,
          action: validatedData.action,
        },
      });
      
      // Update user points
      await prisma.user.update({
        where: { id: userId },
        data: {
          points: {
            increment: pointsToAward,
          },
        },
      });
      
      // Update idea metrics
      if (validatedData.rating) {
        const idea = await prisma.idea.findUnique({
          where: { id: validatedData.ideaId },
          select: { upvotes: true, downvotes: true }
        });
        
        if (idea) {
          await prisma.idea.update({
            where: { id: validatedData.ideaId },
            data: {
              // Update upvotes or downvotes based on action
              ...(validatedData.action === 'like' ? { upvotes: idea.upvotes + 1 } : {}),
              ...(validatedData.action === 'pass' ? { downvotes: idea.downvotes + 1 } : {}),
            },
          });
        }
      }
    }
    
    return NextResponse.json({
      success: true,
      feedback,
      pointsAwarded: pointsToAward,
    });
    
  } catch (error) {
    console.error('Error submitting feedback:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.errors },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to submit feedback' },
      { status: 500 }
    );
  }
}

// Get all feedback for a specific idea
export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Get idea ID from URL
    const url = new URL(request.url);
    const ideaId = url.searchParams.get('ideaId');
    
    if (!ideaId) {
      return NextResponse.json(
        { error: 'Idea ID is required' },
        { status: 400 }
      );
    }
    
    // Check if idea exists
    const idea = await prisma.idea.findUnique({
      where: { id: ideaId },
    });
    
    if (!idea) {
      return NextResponse.json(
        { error: 'Idea not found' },
        { status: 404 }
      );
    }
    
    // Get all feedback for the idea
    const feedback = await prisma.feedback.findMany({
      where: { ideaId },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            image: true,
          },
        },
      },
    });
    
    return NextResponse.json({ feedback });
    
  } catch (error) {
    console.error('Error fetching feedback:', error);
    
    return NextResponse.json(
      { error: 'Failed to fetch feedback' },
      { status: 500 }
    );
  }
}
